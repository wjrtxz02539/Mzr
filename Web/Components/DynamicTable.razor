<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>

<table class="table table-striped">
    <thead>
        <tr>
            @if (DisplayUser)
            {
                <th scope="col">Up</th>
            }
            <th scope="col">数据</th>
            <th scope="col" class="sort-th" @onclick=@(() => SortTable("time"))>时间 <i class="fa @SortIcon("time")" /></th>
            <th scope="col">内容</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var dynamic in Dynamics)
        {
            <tr>
                @if (DisplayUser)
                {
                    var user = userDict[dynamic.UserId];
                    <td class="col-2">
                        <div class="row">
                            <div class="col-4" style="min-width: 3rem; min-height: 3rem">
                                <img src=@user.Avatar class="rounded" style="width: 3rem; height: 3rem" alt="Avatar" />
                            </div>
                            <div class="col" style="min-width: auto; min-height: auto">
                                <a href="/BiliUser/?userId=@user.UserId" target="_blank" class="text-decoration-none">
                                    @user.Username
                                </a>
                            </div>
                        </div>
                    </td>
                }
                <td class="col-2">
                    <div class="row">
                        ❤ @dynamic.Like
                    </div>
                    <div class="row">
                        👁 @dynamic.View
                    </div>
                </td>
                <td>@dynamic.Time.ToLocalTime()</td>
                <td>
                    <a href="/BiliDynamic/?dynamicId=@dynamic.DynamicId" target="_blank" class="text-decoration-none">
                        @dynamic.Description
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@using Mzr.Share.Models.Bilibili
@code {
    [Parameter]
    public List<BiliDynamic> Dynamics { get; set; } = new();
    [Parameter]
    public bool DisplayUser { get; set; } = false;

    [Parameter]
    public SortMetaData SortMetaData { get; set; } = null!;
    [Parameter]
    public EventCallback<string> SortCallback { get; set; }

    [Inject]
    private IBiliUserRepository userRepo { get; set; } = null!;
    private Dictionary<long, BiliUser> userDict = new();
    private SortMetaData sortMetaData = null!;

    protected override void OnInitialized()
    {
        sortMetaData = SortMetaData;
    }

    private string SortIcon(string field)
    {
        if (!field.Equals(sortMetaData.Field))
            return "fa-thin fa-sort";
        return sortMetaData.GetIconClass();
    }
    private async Task SortTable(string field)
    {
        if (!field.Equals(sortMetaData.Field))
        {
            sortMetaData = new(field);
        }
        sortMetaData.Next();

        await SortCallback.InvokeAsync(sortMetaData.SortValue);
    }

    protected override void OnParametersSet()
    {
        if (DisplayUser)
        {
            userDict.Clear();
            var userSet = new HashSet<long>();
            foreach (var dynamic in Dynamics)
                userSet.Add(dynamic.UserId);

            foreach (var item in userSet)
                userDict.Add(item, userRepo.Collection.Find(f => f.UserId == item).FirstOrDefault());
        }
    }
}