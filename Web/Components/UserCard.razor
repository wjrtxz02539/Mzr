@if (!isLoaded)
{
    <LoadingScreen />
}
else if (user == null)
{
    <NotFound />
}
else
{
    <PageTitle>用户: @user?.Username</PageTitle>

    <div class="card" style="width: 18rem;">
        <img src=@user?.Avatar class="card-img-top" alt="Avatar">
        <div class="card-body">
            <h5 class="card-title">@user?.Username</h5>
            <div class="row card-subtitle mb-2 text-muted">
                <div class="col">
                    @user?.UserId
                </div>
                <div class="col">
                    @user?.SexString
                </div>
            </div>
            <div class="row card-subtitle mb-2 text-muted">
                <div class="col">
                    Lv.@user?.Level
                </div>
                <div class="col">
                    @user?.VipString
                </div>
            </div>
            <p class="card-text">@user?.Sign</p>
            <div class="row">
                <div class="col">
                    <a href="https://space.bilibili.com/@user?.UserId" class="btn btn-primary" target="_blank">个人空间</a>
                </div>
                @if (replyCount.HasValue)
                {
                    <div class="col align-middle">
                        评论 @replyCount 条
                    </div>
                }
            </div>
            <div class="h-auto text-muted text-end fst-italic" style="font-size: 0.1rem">@userFetchTime ms, @replyFetchTime ms</div>
        </div>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "userId")]
    public long UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "replyCountEnabled")]
    public bool ReplyCountEnabled { get; set; } = false;

    private BiliUser? user = null;
    private long? replyCount = null;
    private long userFetchTime;
    private long replyFetchTime;
    private bool isLoaded = false;


    [Inject]
    private IBiliUserRepository userRepo { get; set; } = null!;

    [Inject]
    private IBiliReplyRepository replyRepo { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        isLoaded = false;
        var watch = new Stopwatch();
        watch.Start();
        user = await userRepo.Collection.Find(f => f.UserId == UserId).FirstOrDefaultAsync();
        userFetchTime = watch.ElapsedMilliseconds;

        if (ReplyCountEnabled)
        {
            replyCount = await replyRepo.Collection.Find(f => f.UserId == UserId).CountDocumentsAsync();
            replyFetchTime = watch.ElapsedMilliseconds - userFetchTime;
        }
        watch.Stop();
        isLoaded = true;
    }
}
