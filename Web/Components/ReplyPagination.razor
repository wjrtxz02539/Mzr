@if (!isLoaded)
{
    <LoadingScreen />
}
else
{
    <div class="row justify-content-end">
        <div class="col-3">
            <input title="评论" style="width: 100%; height: 100%" @bind-value=ContentQuery />
        </div>
        <div class="col-1">
            <button type="button" class="btn btn-primary" stype="width: 100%" @onclick=Request>查询</button>
        </div>
    </div>
    <div class="row">
        <ReplyTable Replies="response.Items" SortCallback="SortTable" SortMetaData="sortMetaData" />
    </div>

    <div class="row h-auto">
        <div class="col">
            <Pagination MetaData="response.MetaData" Spread="3" OnSelectedPageCallback="SelectedPage" OnChangePageSizeCallback="ChangePageSize" />
        </div>
        <div class="col-1 text-muted text-end fst-italic" style="font-size: 0.1rem">@requestTime ms</div>
    </div>
}

@code {
    public PagingResponse<BiliReply> response { get; set; } = new();

    [Parameter]
    public int Page { get; set; } = 1;
    [Parameter]
    public int PageSize { get; set; } = 10;
    [Parameter]
    public string Sort { get; set; } = "-time";
    [Parameter]
    public long? UserId { get; set; } = null;
    [Parameter]
    public long? ThreadId { get; set; } = null;
    [Parameter]
    public long? DialogId { get; set; } = null;
    [Parameter]
    public long? UpId { get; set; } = null;
    [Parameter]
    public string? ContentQuery { get; set; } = null;

    [Parameter]
    public DateTime? StartTime { get; set; } = null;
    [Parameter]
    public DateTime? EndTime { get; set; } = null;

    [Inject]
    private BiliReplyService replyService { get; set; } = null!;

    private SortMetaData sortMetaData => new SortMetaData(Sort);

    private long requestTime;

    private bool isLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await Request();
    }

    private async Task ChangePageSize(int size)
    {
        PageSize = size;
        Page = 1;
        await Request();
    }

    private async Task SelectedPage(int page)
    {
        Page = page;
        await Request();
    }

    private async Task SortTable(string sort)
    {
        Sort = sort;
        Page = 1;
        await Request();
    }

    private async Task Request()
    {
        isLoaded = false;
        var stopWatch = new Stopwatch();
        stopWatch.Start();
        response = await replyService.Pagination(userId: UserId, threadId: ThreadId, upId: UpId, dialogId: DialogId,
            page: Page, size: PageSize, sort: Sort, contentQuery: ContentQuery, startTime: StartTime, endTime: EndTime);
        stopWatch.Stop();
        requestTime = stopWatch.ElapsedMilliseconds;
        isLoaded = true;
    }
}
