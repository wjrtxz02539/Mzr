<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }
</style>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th scope="col" class="col-2 sort-th" @onclick=@(() => SortTable("username"))>用户<i class="fa @SortIcon("username")"></i></th>
            <th scope="col" class="col-1 sort-th" @onclick=@(() => SortTable("user_id"))>UID<i class="fa @SortIcon("user_id")"></i></th>
            <th scope="col" class="col-1 sort-th" @onclick=@(() => SortTable("level"))>Lv<i class="fa @SortIcon("level")"></i></th>
            <th scope="col" class="col sort-th">挂件</th>
            <th scope="col" class="col sort-th">大航海</th>
            <th scope="col" class="col sort-th">签名</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var user in Users)
        {
            <tr>
                <td>
                    <div class="row">
                        <div class="col-4" style="min-width: 3rem; min-height: 3rem">
                            <img src=@user.Avatar class="rounded" style="width: 3rem; height: 3rem" alt="Avatar" />
                        </div>
                        <div class="col" style="min-width: auto; min-height: auto">
                            <a href="/BiliUser/?userId=@user.UserId" target="_blank" class="text-decoration-none">
                                @user.Username
                            </a>
                        </div>
                    </div>
                </td>
                <td>
                    @user.UserId
                </td>
                <td>@user.Level</td>
                <td>@(string.Join(',', user.Pendants))</td>
                <td>@(string.Join(',', user.Sailings.Select(x => x.Name)))</td>
                <td>@user.Sign</td>
            </tr>
        }
    </tbody>
</table>

@code {
    [Parameter]
    public List<BiliUser> Users { get; set; } = new();

    [Parameter]
    public EventCallback<string> SortCallback { get; set; }

    [Parameter]
    public SortMetaData SortMetaData { get; set; } = null!;

    private SortMetaData sortMetaData = null!;

    protected override void OnInitialized()
    {
        sortMetaData = SortMetaData;
    }

    private string SortIcon(string field)
    {
        if (!field.Equals(sortMetaData.Field))
            return "fa-thin fa-sort";
        return sortMetaData.GetIconClass();
    }
    private async Task SortTable(string field)
    {
        if (!field.Equals(sortMetaData.Field))
        {
            sortMetaData = new(field);
        }
        sortMetaData.Next();

        await SortCallback.InvokeAsync(sortMetaData.SortValue);
    }
}
